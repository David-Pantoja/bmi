[{"/Users/david/Desktop/bmi-calculator-main/src/components/Calculator.jsx":"1","/Users/david/Documents/Github/bmi/bmi-calculator-main/src/index.js":"2","/Users/david/Documents/Github/bmi/bmi-calculator-main/src/App.js":"3","/Users/david/Documents/Github/bmi/bmi-calculator-main/src/components/Calculator.jsx":"4"},{"size":5589,"mtime":1652714146770,"results":"5","hashOfConfig":"6"},{"size":406,"mtime":1652734351740,"results":"7","hashOfConfig":"8"},{"size":413,"mtime":1652734353097,"results":"9","hashOfConfig":"8"},{"size":8081,"mtime":1652734359019,"results":"10","hashOfConfig":"8"},{"filePath":"11","messages":"12","suppressedMessages":"13","errorCount":1,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},"khc46d",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"103elj",{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},"/Users/david/Desktop/bmi-calculator-main/src/components/Calculator.jsx",["26","27","28","29","30"],[],"import React, { useState, useEffect } from 'react'\nimport { Card, Form, Control } from 'react-bootstrap'\nimport style from './Calculator.module.css'\n\nfunction Calculator() {\n    const { Group, Control, Label } = Form\n\n    const [weight, setWeight] = useState(null)\n    const [height, setHeight] = useState(null)\n    const [metric, setMetric] = useState(false)\n    const [bmi, setBmi] = useState('')\n    const [message, setMessage] = useState('')\n    const [healthyWeight, setHealthyWeight] = useState('')\n    const [range, setRange] = useState('')\n    \n    const calBmi = (e) => {\n\n        const container = document.getElementById('container')\n        const messageEl = document.getElementById('message-el')\n        \n        if(weight === null || height === null) {\n            return;\n        }\n\n        let heightInMeter = (height / 100).toFixed(2)\n        let bmi = (weight /(heightInMeter * heightInMeter))\n        //min normal bmi value\n        let minBmi = 18.5\n        //max normal bmi value\n        let maxBmi = 25\n        // min weight required for underweight category for normal weight \n        let minWeightCal = (minBmi * (heightInMeter * heightInMeter))\n        let minWeight = Math.ceil(minWeightCal * 100) / 100\n        // min weight required for overweight category for normal weight\n        let maxWeightCal = (maxBmi * (heightInMeter * heightInMeter))\n        let maxWeight = Math.floor(maxWeightCal * 100) / 100\n        let reqWeightCal = 0\n        let reqWeight = 0\n        setBmi(bmi.toFixed(1))\n        setRange(`${minWeight} - ${maxWeight}`)\n\n        // bmi check for underweight\n        if(bmi >= 9 && bmi < 18.5) {\n            if( bmi >= 9 && bmi < 15) {\n                setMessage('very severely underweight')\n            }\n            else if (bmi >= 15 && bmi < 16) {\n                setMessage('severely underweight')\n            }\n            else{\n                setMessage('underweight')\n            }\n            reqWeightCal = minWeight - weight\n            reqWeight =  ((reqWeightCal * 100) / 100).toFixed(2)\n            setHealthyWeight(`+${reqWeight} kgs for healthy weight`)\n            setRange(`${minWeight} - ${maxWeight}`)\n            container.className = ''\n            container.classList.add('bg-warning')\n            messageEl.className = ''\n            messageEl.classList.add('text-warning')\n        }\n        // bmi check for normal\n        else if(bmi >= 18.5 && bmi <= 25) {\n            setMessage('normal')\n            setHealthyWeight(`Healthy weight`)\n            container.className = ''\n            container.classList.add('bg-success')\n            messageEl.className = ''\n            messageEl.classList.add('text-success')\n        }\n        // bmi check for overweight\n        else if(bmi > 25 && bmi < 50) {\n            if (bmi > 25 && bmi < 30){\n                setMessage('overweight')\n            } \n            else if(bmi >= 30 && bmi < 35) {\n                setMessage('obese Class I')\n            }\n            else if(bmi >= 35 && bmi < 40) {\n                setMessage('obese Class II')\n            }\n            else {\n                setMessage('obese Class III')\n            }\n            reqWeightCal = weight - maxWeight\n            reqWeight =  ((reqWeightCal * 100) / 100).toFixed(2)\n            setHealthyWeight(`-${reqWeight} kgs for healthy weight`)\n            setRange(`${minWeight} - ${maxWeight}`)\n            container.className = ''\n            container.classList.add('bg-danger')\n            messageEl.className = ''\n            messageEl.classList.add('text-danger')\n        }\n        else {\n            setBmi('')\n            setMessage('')\n            setHealthyWeight('')\n            setRange('')\n            container.className = ''\n            container.classList.add('bg-primary')\n            messageEl.className = ''\n            messageEl.classList.add('text-primary')\n        }\n        \n    }\n\n    useEffect(() => {\n        calBmi();\n      }, [weight, height]);\n      \n    return (\n        <>  \n            <Card style={{ width: \"26rem\" }} border='light' className='p-4 shadow'>\n                <h2 className='text-center mb-3'>BMI Calculator</h2>\n                <Form className='mb-3 px-3' id='bmiForm'>\n                    <select>\n                        <option value=\"imperial\">imperial</option>\n                        <option value=\"metric\">metric</option>\n                        value={type}\n                        onChange={(e) => console.log(e.target.value)}\n                    </select>\n                    <Group className='mb-3'>\n                        <Label>Weight (kg)</Label>\n                        \n                        <Control value={weight} onChange={(e) => setWeight(e.target.value)} />\n                    </Group>\n                    <Group className='mb-4'>\n                        <Label>Height (cm)</Label>\n                        <Control value={height} onChange={(e) => setHeight(e.target.value)} />\n                    </Group>\n                </Form>\n                <div className='text-center'>\n                    <h3 className='mb-0'>BMI</h3>\n                    <h3 className={style.font}>{bmi}</h3>\n                    <div className=\"lead\">\n                        <div id='message-el'>\n                            <h5>{message}</h5>\n                        </div>\n                            <h6>{ healthyWeight }</h6>\n                            <h6>{ range }</h6>\n                    </div>\n                </div>\n            </Card>\n        </>\n    )\n}\n\nexport default Calculator\n\n/**\n * Enable metrics toggling\n * Research BMI range\n */","/Users/david/Documents/Github/bmi/bmi-calculator-main/src/index.js",[],[],"/Users/david/Documents/Github/bmi/bmi-calculator-main/src/App.js",[],[],[],"/Users/david/Documents/Github/bmi/bmi-calculator-main/src/components/Calculator.jsx",["31"],[],"//imports react related webframework tools\nimport React, { useState, useEffect } from 'react'\n//imports web componenets\nimport { Card, Form } from 'react-bootstrap'\n//imports styles\nimport style from './Calculator.module.css'\n\n//Creates a component thhat contains the calculator functionality\nfunction Calculator() {\n    //gets sub components from Form\n    const { Group, Control, Label } = Form\n\n    //stores weight as a number (without units)\n    const [weight, setWeight] = useState(null)\n    //stores height as a number (without units)\n    const [height, setHeight] = useState(null)\n    //determines the units with the value true meaning the metricc system\n    const [metric, setMetric] = useState(true)\n    //Contains bmi as a string\n    const [bmi, setBmi] = useState('')\n    //Contains bmi class as a string\n    const [message, setMessage] = useState('')\n    //Contains change of weight needed to normalize as string\n    const [healthyWeight, setHealthyWeight] = useState('')\n    //Contains range of cacluated healthy weight as a string\n    const [range, setRange] = useState('')\n    //Contains bmi description as a string\n    const [description, setDescription] = useState('')\n    \n    //function for calculating string state variables from weight and height\n    const calBmi = (e) => {\n\n        //simplifies document tag location\n        const container = document.getElementById('container')\n        //simplifies document tag location\n        const messageEl = document.getElementById('message-el')\n        \n        //Stops calculation if either height or weight field is missing\n        if(weight === null || height === null) {\n            return;\n        }\n        \n        //lower bound of healthy bmi value\n        let minBmi = 18.5\n        //upper bound of healthy bmi value\n        let maxBmi = 25\n        //initializes calculated variables\n        let bmi, minWeightCal, minWeight, maxWeightCal, maxWeight, reqWeightCal, reqWeight, units\n        //sets variables based of units system\n        if(metric){\n            //turns centimeter measurment to meters for metric conversion\n            let heightInMeter = (height / 100).toFixed(2)\n\n            //calculates bmi and weight ranges with metric units\n            bmi = (weight /(heightInMeter * heightInMeter))\n            minWeightCal = (minBmi * (heightInMeter * heightInMeter))\n            minWeight = Math.ceil(minWeightCal * 100) / 100\n            maxWeightCal = (maxBmi * (heightInMeter * heightInMeter))\n            maxWeight = Math.floor(maxWeightCal * 100) / 100\n            units = \"kgs\"\n        }else{\n            //calculates bmi and weight ranges with imperial units\n            bmi = ((weight * 703)/(height*height))\n            minWeightCal = (minBmi * (height * height))/703\n            minWeight = Math.ceil(minWeightCal * 100) / 100\n            maxWeightCal = (maxBmi * (height * height))/703\n            maxWeight = Math.floor(maxWeightCal * 100) / 100\n            units = \"lbs\"\n        }\n        //sets bmi text to bmi with 1 decimal\n        setBmi(bmi.toFixed(1))\n        //sets bmi range with calculated values\n        setRange(`${minWeight} - ${maxWeight}`)\n\n        //Sets information for underweight bmi calculation\n        if(bmi >= 9 && bmi < 18.5) {\n            setMessage('underweight')\n            reqWeightCal = minWeight - weight\n            reqWeight =  ((reqWeightCal * 100) / 100).toFixed(2)\n            setHealthyWeight(`+${reqWeight} ${units} for healthy weight.`)\n            setDescription(\"You should aim for 0.25-0.5% of weight gain per week or consult professionals for a modified weight gain plan. \\n\"\n            + \"Doing more than this alone can be unsustainable and harmful. \\n\" + \n            \"In addition, this calculation may not be accurately representative if you have a high muscle mass, are a child, or are elderly.\")\n            container.className = ''\n            container.classList.add('bg-warning')\n            messageEl.className = ''\n            messageEl.classList.add('text-warning')\n        }\n        //Sets information for healthy bmi calculation\n        else if(bmi >= 18.5 && bmi <= 25) {\n            setMessage('normal')\n            setHealthyWeight(`Healthy weight.`)\n            setDescription(\"This calculation may not be accurately representative if you have a high muscle mass, are a child, or are elderly.\")\n            container.className = ''\n            container.classList.add('bg-success')\n            messageEl.className = ''\n            messageEl.classList.add('text-success')\n        }\n        //Sets information for overweight bmi calculation\n        else if(bmi > 25 && bmi < 50) {\n            if (bmi < 30){\n                setMessage('overweight')\n            }\n            else {\n                setMessage('obese')\n            }\n            reqWeightCal = weight - maxWeight\n            reqWeight =  ((reqWeightCal * 100) / 100).toFixed(2)\n            setHealthyWeight(`-${reqWeight} ${units} for healthy weight`)\n            setDescription(\"You should aim for 1-2 pounds or 1 kilogram of weight loss per week or consult professionals for a modified weight loss plan. \\n\"\n            + \"Doing more than this alone can be unsustainable and harmful. \\n\" + \n            \"In addition, this calculation may not be accurately representative if you have a high muscle mass, are a child, or are elderly.\")\n            container.className = ''\n            container.classList.add('bg-danger')\n            messageEl.className = ''\n            messageEl.classList.add('text-danger')\n        }\n\n        //resets values if bmi calculation is not a reasonable level\n        else {\n            setBmi('')\n            setMessage('')\n            setHealthyWeight('')\n            setRange('')\n            setDescription('')\n            container.className = ''\n            container.classList.add('bg-primary')\n            messageEl.className = ''\n            messageEl.classList.add('text-primary')\n        }\n        \n    }\n\n    //Rerenders bmi calculations whenever weight, height, or metric state variables are updated\n    useEffect(() => {\n        calBmi();\n      }, [weight, height, metric]);\n    \n    //renders html with respected variables\n    return (\n        <>  \n            <Card style={{ width: \"26rem\" }} border='light' className='p-4 shadow'>\n                <h2 className='text-center mb-3'>BMI Calculator</h2>\n                <Form className='mb-3 px-3' id='bmiForm'>\n                    <select onChange={(e) => setMetric(e.target.value === \"true\")} value={metric}>\n                        <option value={true}>Metric Units</option>\n                        <option value={false}>Imperial Units</option>\n                    </select>\n                    <Group className='mb-3'>\n                        {metric && <Label>Weight (kg)</Label>}\n                        {!metric && <Label>Weight (lbs)</Label>}\n                        <Control value={weight} onChange={(e) => setWeight(e.target.value)} />\n                    </Group>\n                    <Group className='mb-4'>\n                        {metric && <Label>Height (cm)</Label>}\n                        {!metric && <Label>Height (in)</Label>}\n                        <Control value={height} onChange={(e) => setHeight(e.target.value)} />\n                    </Group>\n                </Form>\n                <div className='text-center'>\n                    {bmi && <h3 className='mb-0'>BMI</h3>}\n                    <h3 className={style.font}>{bmi}</h3>\n                    <div className=\"lead\">\n                        <div id='message-el'>\n                            <h5>{message}</h5>\n                        </div>\n                            <h6>{ healthyWeight }</h6>\n                            <h6>{ range }</h6>\n                            <h6>{ description }</h6>\n                            {bmi && <a href=\"https://www.cdc.gov/healthyweight/assessing/bmi/adult_bmi/index.html\">Read More</a>}\n                    </div>\n                </div>\n            </Card>\n        </>\n    )\n}\n\n//exports function for encapsulation in App\nexport default Calculator",{"ruleId":"32","severity":1,"message":"33","line":2,"column":22,"nodeType":"34","messageId":"35","endLine":2,"endColumn":29},{"ruleId":"32","severity":1,"message":"36","line":10,"column":12,"nodeType":"34","messageId":"35","endLine":10,"endColumn":18},{"ruleId":"32","severity":1,"message":"37","line":10,"column":20,"nodeType":"34","messageId":"35","endLine":10,"endColumn":29},{"ruleId":"38","severity":1,"message":"39","line":109,"column":10,"nodeType":"40","endLine":109,"endColumn":26,"suggestions":"41"},{"ruleId":"42","severity":2,"message":"43","line":119,"column":32,"nodeType":"34","messageId":"44","endLine":119,"endColumn":36},{"ruleId":"38","severity":1,"message":"39","line":137,"column":10,"nodeType":"40","endLine":137,"endColumn":34,"suggestions":"45"},"no-unused-vars","'Control' is defined but never used.","Identifier","unusedVar","'metric' is assigned a value but never used.","'setMetric' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'calBmi'. Either include it or remove the dependency array.","ArrayExpression",["46"],"no-undef","'type' is not defined.","undef",["47"],{"desc":"48","fix":"49"},{"desc":"50","fix":"51"},"Update the dependencies array to be: [weight, height, calBmi]",{"range":"52","text":"53"},"Update the dependencies array to be: [weight, height, metric, calBmi]",{"range":"54","text":"55"},[3944,3960],"[weight, height, calBmi]",[6110,6134],"[weight, height, metric, calBmi]"]